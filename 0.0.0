local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/blix200/murcery-documentation/refs/heads/main/UI%20lib%202"))()

local Window = Library:New({
    Name = "Test Build | May 8, 2025 | Version (Beta)", -- name, Name, title, Title
})

--[[
    Window:SetName("string"),
    Window:GetConfig(),
    Window:LoadConfig("string"),
    Window:Move("vector2"),
    Window:CloseContent(),
    Window:IsOverContent(),
    Window:Unload(),
    Window:Fade(),
]]

local Page = Window:Page({
    Name = "silent aim" -- name, Name, title, Title
})

local Page2 = Window:Page({
    Name = "visuals" -- name, Name, title, Title
})

local Page3 = Window:Page({
    Name = "charceter" -- name, Name, title, Title
})

local Page4 = Window:Page({
    Name = "settings" -- name, Name, title, Title
})

local PageSection1 = Page:Section({
    Name = "Hi Lol Bruh", -- name, Name, title, Title
    Fill = true,
    Side = "Left"
})

local Button1 = PageSection1:Toggle({
    Name = "test", -- name, Name, title, Title
    callback = function(value)
        print("testing1..")
    end
})




local Button2 = Page:Toggle({
    Name = "silent aim (P)", -- name, Name, title, Title
    callback = function(value)
        -- // Dependencies
_G.PRED = 0.025
local Aiming = loadstring(game:HttpGet("https://raw.githubusercontent.com/Ezucii/new/main/sourceeeeeeeeeeeeee.lua"))()
Aiming.TeamCheck(false)
Aiming.ShowFOV = false
Aiming.FOV = 55
-- // Services
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
 
-- // Vars
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera
 
local DaHoodSettings = {
    SilentAim = true,
    AimLock = false,
    Prediction = 0.121,
    AimLockKeybind = Enum.KeyCode.P
}
getgenv().DaHoodSettings = DaHoodSettings
 
-- // Overwrite to account downed
function Aiming.Check()
    -- // Check A
    if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
        return false
    end
 
    -- // Check if downed
    local Character = Aiming.Character(Aiming.Selected)
    local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
    local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
 
    -- // Check B
    if (KOd or Grabbed) then
        return false
    end
 
    -- //
    return true
end
 
-- // Hook
local __index
__index = hookmetamethod(game, "__index", function(t, k)
    -- // Check if it trying to get our mouse's hit or target and see if we can use it
    if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and Aiming.Check()) then
        -- // Vars
        local SelectedPart = Aiming.SelectedPart
 
        -- // Hit/Target
        if (DaHoodSettings.SilentAim and (k == "Hit" or k == "Target")) then
            -- // Hit to account prediction
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)
 
            -- // Return modded val
            return (k == "Hit" and Hit or SelectedPart)
        end
    end
 
    -- // Return
    return __index(t, k)
end)
 
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
 
mouse.KeyDown:Connect(function(key)
    if key == "v" then
        if Aiming.Enabled == false then
        Aiming.Enabled = true
        else
        Aiming.Enabled = false
        end
    end
end)
 
 
RunService.RenderStepped:Connect(function()
 
    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local Value = tostring(ping)
    local pingValue = Value:split(" ")
    local PingNumber = pingValue[1]
 
    DaHoodSettings.Prediction = PingNumber / 1000 + _G.PRED
 
                    if Aiming.Character.Humanoid.Jump == true and AimlockTarget.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                    Aiming.TargetPart = "RightFoot"
                else
                    Aiming.Character:WaitForChild("Humanoid").StateChanged:Connect(function(new)
 
                    if new == Enum.HumanoidStateType.Freefall then
                    Aiming.TargetPart = "RightFoot"
                    else
 
                    Aiming.TargetPart = Aiming.SelectedPart
 
                    end
 
                    end)
 
                end
 
end)
    end
})

local Button2 = Page:Toggle({
    Name = "show fov", -- name, Name, title, Title
    callback = function(value)
        local fovCircle = Drawing.new("Circle")
fovCircle.Visible = true
fovCircle.Transparency = 1
fovCircle.Thickness = 2
fovCircle.Color = Color3.fromRGB(128, 0, 128)
fovCircle.Radius = 100
fovCircle.Filled = false

local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

RS.RenderStepped:Connect(function()
    local mouseLocation = UIS:GetMouseLocation()
    fovCircle.Position = Vector2.new(mouseLocation.X, mouseLocation.Y)
end)
    end
})

local Page2Section2 = Page:Section({
    Name = "ESP", -- name, Name, title, Title
    Fill = true,
    Side = "Right"
})


local Button1 = Page2Section2:Toggle({
    Name = "box esp", -- name, Name, title, Title
    callback = function(value)
        local espDrawings = {}

local function createESPForPlayer(player)
    -- delete this line below if u want it to draw esp on your local player if u want that 4 sum reason
    if player == game.Players.LocalPlayer then return end

    local topLine = Drawing.new("Line")
    local bottomLine = Drawing.new("Line")
    local leftLine = Drawing.new("Line")
    local rightLine = Drawing.new("Line")

    espDrawings[player] = {topLine, bottomLine, leftLine, rightLine}

    game:GetService("RunService").RenderStepped:Connect(function()
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            -- Hide drawings if player is not valid
            for _, drawing in pairs(espDrawings[player] or {}) do
                drawing.Visible = false
            end
            return
        end

        local character = player.Character
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local camera = workspace.CurrentCamera
            local hrpPosition = hrp.Position
            local screenPos, onScreen = camera:WorldToViewportPoint(hrpPosition)

            if onScreen then
                local size = Vector3.new(2, 3, 0) * (character.Head.Size.Y)
                local topLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, size.Y, 0)).p)
                local topRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, size.Y, 0)).p)
                local bottomLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, -size.Y, 0)).p)
                local bottomRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, -size.Y, 0)).p)

                topLine.From = Vector2.new(topLeft.X, topLeft.Y)
                topLine.To = Vector2.new(topRight.X, topRight.Y)
                bottomLine.From = Vector2.new(bottomLeft.X, bottomLeft.Y)
                bottomLine.To = Vector2.new(bottomRight.X, bottomRight.Y)
                leftLine.From = Vector2.new(topLeft.X, topLeft.Y)
                leftLine.To = Vector2.new(bottomLeft.X, bottomLeft.Y)
                rightLine.From = Vector2.new(topRight.X, topRight.Y)
                rightLine.To = Vector2.new(bottomRight.X, bottomRight.Y)

                -- Set the color to purple
                local color = Color3.fromRGB(128, 0, 128)  -- Purple color
                for _, line in pairs({topLine, bottomLine, leftLine, rightLine}) do
                    line.Color = color
                    line.Thickness = 2
                    line.Transparency = 1
                    line.Visible = true
                end
            else
                for _, line in pairs({topLine, bottomLine, leftLine, rightLine}) do
                    line.Visible = false
                end
            end
        end
    end)
end

for _, player in pairs(game.Players:GetPlayers()) do
    createESPForPlayer(player)
end
game.Players.PlayerAdded:Connect(createESPForPlayer)
    end
})

local Toggle1 = PageSection1:Toggle({
    Name = "RapidFire",
    Default = false,
    callback = function(value)
       -- Ensure script state is toggled correctly on each execution
       if _G.RapidFirev1 == nil then
        _G.RapidFirev1 = false  -- Default value if not previously set
        end
    
        -- If the script is already active, turn it off; if it's inactive, turn it on
        _G.RapidFirev1 = not _G.RapidFirev1
    
        if _G.RapidFirev1 then
        local player = game.Players.LocalPlayer
        local userInputService = game:GetService("UserInputService")
        local isActive = false  -- Tracks whether the gun activation is enabled or not
    
        -- Function to continuously activate the held item (gun)
        local function continuouslyActivateHeldItem()
            while _G.RapidFirev1 do  -- Stop the loop if the script is unloaded
                if isActive then
                    -- Ensure the player is holding a tool (gun)
                    local character = player.Character or player.CharacterAdded:Wait()
                    local gunTool = character:FindFirstChildOfClass("Tool")
    
                    if gunTool then
                        gunTool:Activate()  -- Only activate if a tool is already equipped
                    end
                end
                wait(0.01)  -- Shorter delay for faster activation
            end
        end
    
        -- Function to detect when the left mouse button is pressed or held
        local function onMouseClick(input, gameProcessedEvent)
            if gameProcessedEvent then return end
    
            -- Check for left mouse button (MouseButton1)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                isActive = true
            end
        end
    
        -- Function to detect when the left mouse button is released
        local function onMouseRelease(input, gameProcessedEvent)
            if gameProcessedEvent then return end
    
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                isActive = false
            end
        end
    
        -- Connect the mouse click and release functions and start the continuous loop
        _G.mouseClickConnection = userInputService.InputBegan:Connect(onMouseClick)
        _G.mouseReleaseConnection = userInputService.InputEnded:Connect(onMouseRelease)
        spawn(continuouslyActivateHeldItem)
        else
        if _G.mouseClickConnection then
            _G.mouseClickConnection:Disconnect()  -- Disconnect the mouse click listener
            _G.mouseClickConnection = nil
        end
        if _G.mouseReleaseConnection then
            _G.mouseReleaseConnection:Disconnect()  -- Disconnect the mouse release listener
            _G.mouseReleaseConnection = nil
        end
        end
        end
    end
})

local Toggle2 = Page3:Toggle({
    Name = "unban your vc", -- name, Name, title, Title
    callback = function(value)
        game:GetService("VoiceChatService"):joinVoice()
    end
})

local Toggle3 = Page3:Toggle({
    Name = "rust hitmarker", -- name, Name, title, Title
    callback = function(value)
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local UserInputService = game:GetService("UserInputService")
        local Camera = game.Workspace.CurrentCamera
        local RaycastParams = RaycastParams
        RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        RaycastParams.IgnoreWater = true
        
        -- Settings: Only keep the "Rust_HeadShot" sound
        local soundOptions = {
            Rust_HeadShot = "rbxassetid://4764109000"
        }
        
        local currentHitSoundId = soundOptions.Rust_HeadShot  -- Use only the Rust sound
        local soundVolume = 1  -- Volume of the hit sound
        local previousHealth = {}  -- Store previous health of players
        local isHitSoundEnabled = false  -- Default state of the hit sound toggle
        
        -- Function to check if a player is visible
        local function isPlayerVisible(player)
            local character = player.Character
            local head = character and character:FindFirstChild("Head")
            if not head then return false end
        
            local origin = Camera.CFrame.Position
            local direction = (head.Position - origin).Unit * (head.Position - origin).Magnitude
            RaycastParams.FilterDescendantsInstances = {Players.LocalPlayer.Character}
            local result = workspace:Raycast(origin, direction, RaycastParams)
            return not result or result.Instance:IsDescendantOf(character)
        end
        
        -- Function to get the nearest player to the cursor with visibility check
        local function getNearestToCursor()
            local mouseLocation = UserInputService:GetMouseLocation()
            local nearestPlayer, shortestDistance = nil, math.huge
        
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer then
                    local character = player.Character
                    if character and character:FindFirstChild("Head") and isPlayerVisible(player) then
                        local head = character.Head
                        local screenPosition, onScreen = Camera:WorldToViewportPoint(head.Position)
                        if onScreen then
                            local distanceToCursor = (Vector2.new(screenPosition.X, screenPosition.Y) - mouseLocation).Magnitude
                            if distanceToCursor < shortestDistance then
                                shortestDistance = distanceToCursor
                                nearestPlayer = player
                            end
                        end
                    end
                end
            end
        
            return nearestPlayer
        end
        
        -- Function to play the hit sound on the nearest player when they take damage
        local function playHitSound(player)
            if not isHitSoundEnabled then return end  -- Only proceed if the hit sound is enabled
        
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local currentHealth = humanoid.Health
                local prevHealth = previousHealth[player.UserId] or currentHealth
        
                -- If the player has lost health, play the hit sound
                if currentHealth < prevHealth then
                    local sound = Instance.new("Sound")
                    sound.SoundId = currentHitSoundId
                    sound.Volume = soundVolume
                    sound.Parent = player.Character:FindFirstChild("Head")
                    sound:Play()
                    sound.Ended:Connect(function()
                        sound:Destroy()
                    end)
                end
        
                -- Update the player's previous health
                previousHealth[player.UserId] = currentHealth
            end
        end
        
        -- Run every frame to check the nearest player's health
        local function checkNearestPlayerDamage()
            local nearestPlayer = getNearestToCursor()
            if nearestPlayer then
                playHitSound(nearestPlayer)
            end
        end
        
        RunService.RenderStepped:Connect(checkNearestPlayerDamage)
        
        -- Toggle for enabling/disabling hit sound
        RightGroupBox:AddToggle('HitSoundsToggle', {
            Text = 'Hit Sounds',
            Default = false,  -- Default value (false so it doesn't play the sound initially)
            Tooltip = 'Plays a sound when a player takes damage',
            Callback = function(Value)
                isHitSoundEnabled = Value
            end
        })
    end
})

local Toggle4 = Page3:Toggle({
    Name = "redeem codes", -- name, Name, title, Title
    callback = function(value)
        -- Create the button inside the callback
        local MyButton = LeftGroupBox:AddButton({
            Text = 'Auto Redeem Codes',
            Func = function()
                local codes = {
                    "Duck",
                    "Watch",
                    "2025",
                    "DACARNIVAL",
                    "RUBY",
                    "THANKSGIVING24",
                    "HALLOWEEN2024",
                    "pumpkins2023",
                    "TRADEME!",
                    "Beary",
                    "ShortCake",
                    "DAUP"
                }
                
                -- Table to track successful codes
                local successfulCodes = {}
                
                -- Function to redeem a code
                local function redeemCode(code)
                    -- Arguments for the server event
                    local args = {
                        [1] = "EnterPromoCode",
                        [2] = code
                    }
                
                    -- Fire the server event
                    game:GetService("ReplicatedStorage").MainEvent:FireServer(unpack(args))
                
                    -- Wait for response or success (adjust the response as needed)
                    local successIndicator = false
                    game:GetService("ReplicatedStorage").MainEvent.OnClientEvent:Connect(function(response)
                        if response == "CodeRedeemed" then  -- Adjust response check as per actual server logic
                            successIndicator = true
                        end
                    end)
                
                    -- Wait for a short time before proceeding to next code
                    wait(6)  -- 6 second wait between attempts (you can adjust this)
                
                    -- If successfully redeemed, log the code
                    if successIndicator then
                        table.insert(successfulCodes, code)
                    end
                
                    print("Attempted to redeem code: " .. code)
                end
                
                -- Attempt to redeem each code
                for _, code in ipairs(codes) do
                    redeemCode(code)
                end
            end,
            DoubleClick = false,
            Tooltip = 'Redeems Active codes in the game'
        })
    end
})

local Toggle5 = Page3:Toggle({
    Name = "orbit", -- name, Name, title, Title
    callback = function(value)
        local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local Camera = workspace.CurrentCamera
    local Workspace = game:GetService("Workspace")
    
    local LocalPlayer = Players.LocalPlayer
    
    local cursorLocked = false
    local targetHead = nil
    local targetPlayer = nil
    local previewHighlight = nil
    local lockedHighlight = nil
    local predictionLevel = 0 -- Default prediction level, can be changed (higher value = more prediction)
    local currentKeybind = Enum.KeyCode.C
    local previewColor = Color3.fromRGB(0, 0, 255) -- Default preview color
    local lockedHighlightColor = Color3.fromRGB(255, 0, 0) -- Default locked highlight color
    local smoothness = 0 -- Default smoothness value
    local highlightsEnabled = false -- Default value for highlights toggle
    
    local ragelock = false  -- Default value for ragelock
    local orbitActive = false  -- Flag for orbit feature
    local orbitSpeed = 10 -- Orbit speed
    local radius = 8 -- Orbit size
    local rotation = CFrame.Angles(0, 0, 0) -- Rotation angles
    
    -- Ensure aimlock state is toggled correctly on each execution
    if _G.aimlock == nil then
        _G.aimlock = false  -- Default value if not previously set
    end
    
    -- Function to check if the player is knocked or grabbed
    local function IsPlayerKnockedOrGrabbed(player)
        local character = player.Character
        if character then
            local bodyEffects = character:FindFirstChild("BodyEffects")
            local grabbingConstraint = character:FindFirstChild("GRABBING_CONSTRAINT")
            if bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value or grabbingConstraint then
                return true
            end
        end
        return false
    end
    
    -- Function to calculate the predicted position based on velocity
    local function GetPredictedPosition(player)
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            local head = character:FindFirstChild("Head")
            if humanoid and head then
                local velocity = humanoid.RootPart.AssemblyLinearVelocity
                return head.Position + velocity * predictionLevel
            end
        end
        return nil
    end
    
    -- Function to find the closest player's head, with prediction
    local function FindClosestPlayerHead()
        local closestPlayer = nil
        local closestDistance = math.huge
        local mousePosition = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                local character = player.Character
                local humanoid = character:FindFirstChild("Humanoid")
    
                if humanoid and humanoid.Health > 0 then
                    if IsPlayerKnockedOrGrabbed(player) then continue end  -- Skip locked/knocked/grabbed players
                    local head = character.Head
                    local predictedHeadPosition = GetPredictedPosition(player) or head.Position
                    local screenPoint = Camera:WorldToScreenPoint(predictedHeadPosition)
                    local distance = (mousePosition - Vector2.new(screenPoint.X, screenPoint.Y)).Magnitude
                    local playerDistance = (Camera.CFrame.Position - predictedHeadPosition).Magnitude
    
                    local ray = Ray.new(Camera.CFrame.Position, predictedHeadPosition - Camera.CFrame.Position)
                    local hitPart, hitPosition = Workspace:FindPartOnRay(ray, LocalPlayer.Character)
    
                    -- Lock even through walls for players within 100 studs
                    if playerDistance <= 100 or (not hitPart or hitPart.Parent == character) then
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        end
    
        if closestPlayer then
            return closestPlayer.Character.Head, closestPlayer
        end
        return nil, nil
    end
    
    -- Function to add a preview highlight for the closest player
    local function AddPreviewHighlight(player)
        if not highlightsEnabled then return end -- Skip if highlights are disabled
    
        -- If preview highlight already exists for this player, return early
        if previewHighlight and previewHighlight.Parent == player.Character then
            previewHighlight.FillColor = previewColor
            return
        end
    
        -- Destroy previous preview highlight if it exists
        if previewHighlight then
            previewHighlight:Destroy()
        end
    
        -- Create a new preview highlight for the closest player
        if player and player.Character then
            previewHighlight = Instance.new("Highlight")
            previewHighlight.Parent = player.Character
            previewHighlight.FillTransparency = 0.5
            previewHighlight.FillColor = previewColor
        end
    end
    
    -- Function to add a red highlight to the locked player
    local function AddLockedHighlight(player)
        if not highlightsEnabled then return end -- Skip if highlights are disabled
    
        -- If locked highlight already exists for this player, return early
        if lockedHighlight and lockedHighlight.Parent == player.Character then
            lockedHighlight.FillColor = lockedHighlightColor
            return
        end
    
        -- Destroy previous locked highlight if it exists
        if lockedHighlight then
            lockedHighlight:Destroy()
        end
    
        -- Create a new locked highlight for the locked player
        if player and player.Character then
            lockedHighlight = Instance.new("Highlight")
            lockedHighlight.Parent = player.Character
            lockedHighlight.FillTransparency = 0.5
            lockedHighlight.FillColor = lockedHighlightColor
        end
    end
    
    -- Lock the cursor to the nearest player's head
    local function LockCursorToHead()
        targetHead, targetPlayer = FindClosestPlayerHead()
        if targetHead then
            AddLockedHighlight(targetPlayer)  -- Add highlight to locked player
            if previewHighlight then previewHighlight:Destroy() end  -- Destroy preview highlight if it exists
            UserInputService.MouseIconEnabled = false
        end
    end
    
    -- Unlock the cursor
    local function UnlockCursor()
        UserInputService.MouseIconEnabled = true
        targetHead = nil
        targetPlayer = nil
        if lockedHighlight then lockedHighlight:Destroy() end
    end
    
    -- Function to activate orbiting around the target player
    local function ActivateOrbit(player)
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            targetPlayer = player
        end
    end
    
    -- Function to deactivate orbiting
    local function DeactivateOrbit()
        targetPlayer = nil
    end
    
    -- Function to handle automatic targeting for RageLock
    local function HandleRageLock()
        -- Ensure RageLock only locks onto the target if it's valid
        if ragelock then
            -- Check if targetPlayer is invalid or knocked
            if targetPlayer and IsPlayerKnockedOrGrabbed(targetPlayer) then
                -- If the locked target is knocked or grabbed, unlock and search for the next target
                cursorLocked = false
                UnlockCursor()
                DeactivateOrbit()
                print("[RageLock] Target is knocked/grabbed, unlocking and searching for next target.")
                targetHead, targetPlayer = FindClosestPlayerHead()
                if targetPlayer then
                    cursorLocked = true
                    LockCursorToHead()
                    AddLockedHighlight(targetPlayer)  -- Add highlight to new target
                end
                return
            end
    
            -- If no valid target is locked, search for a new one
            if not targetPlayer then
                targetHead, targetPlayer = FindClosestPlayerHead()
                if targetPlayer then
                    cursorLocked = true
                    LockCursorToHead()
                    AddLockedHighlight(targetPlayer)  -- Add highlight to new target
                end
            end
        end
    end
    
    -- Orbit update loop (only runs when orbit toggle is true)
    RunService.Stepped:Connect(function(_, dt)
        if orbitActive then
            -- Only update orbit if the toggle is true and the player is locked onto a valid target
            if cursorLocked and targetPlayer then
                -- Only update orbit if the target is locked (Aimlock or RageLock)
                local targetHumanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                if targetHumanoidRootPart then
                    local rot = tick() * orbitSpeed
                    local lpr = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if lpr then
                        -- Orbit calculation (only orbits if locked onto target)
                        lpr.CFrame = CFrame.new(
                            targetHumanoidRootPart.Position + Vector3.new(math.sin(rot) * radius, 0, math.cos(rot) * radius)
                        )
                    end
                end
            end
        end
    
        -- Update loop to continuously follow the locked target for aimlock
        if cursorLocked and _G.aimlock and targetHead then
            -- Handle ragelock to auto lock onto next target if necessary
            if ragelock then
                HandleRageLock()  -- Call the function to handle RageLock auto-targeting
            end
    
            -- Check if the locked player is knocked or grabbed and unlock if necessary
            if IsPlayerKnockedOrGrabbed(targetPlayer) then
                cursorLocked = false
                UnlockCursor()
                DeactivateOrbit()
                print("[Auto Unlock] Target player is knocked or grabbed, unlocking cursor.")
            else
                        -- Proceed with the normal aimlock and orbit
        local predictedHeadPosition = GetPredictedPosition(targetPlayer) or targetHead.Position
        -- Smoothly interpolate the camera's CFrame
        local alpha = 1 - smoothness
        alpha = math.max(alpha, 0.01)  -- Ensure alpha is never 0
        Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, predictedHeadPosition), alpha)
            end
        elseif not cursorLocked and _G.aimlock then
            local closestHead, closestPlayer = FindClosestPlayerHead()
            if closestPlayer ~= targetPlayer then
                AddPreviewHighlight(closestPlayer)
            end
        end
    end)
    
    -- Handle key press (C) for locking the cursor
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == currentKeybind then
            if _G.aimlock then
                cursorLocked = not cursorLocked
                if cursorLocked then
                    LockCursorToHead()
                    if orbitActive then
                        ActivateOrbit(targetPlayer)  -- Activate orbit when locking onto a player and orbiting is enabled
                    end
                else
                    UnlockCursor()
                    DeactivateOrbit()  -- Deactivate orbit when unlocking
                end
            end
        end
    end)
})

local Toggle4 = Page3:Toggle({
    Name = "cash aura",
    Default = false,
    callback = function(value)
        local Settings = {
            Max_Distance = 20 -- Max distance for collecting cash
        }

        -- Locals
        local Space = game:GetService("Workspace")
        local Player = game:GetService("Players").LocalPlayer
        local Camera = Space.CurrentCamera

        -- Global variable to track Cash Aura state
        getgenv().cashAuraEnabled = value -- Use toggle value

        -- Function to send notifications (optional, you can use this if you want to show messages)
        local function sendNotification(title, text, duration)
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = title,
                Text = text,
                Duration = duration or 5
            })
        end

        -- Function to check if the player has anything equipped
        local function hasEquippedItem()
            return Player.Character and Player.Character:FindFirstChildOfClass("Tool") ~= nil
        end

        -- Function to collect money around the player
        local function getMoneyAroundMe()
            if hasEquippedItem() then return end

            for _, money in ipairs(workspace.Ignored.Drop:GetChildren()) do
                if money.Name == "MoneyDrop" and money:FindFirstChild("ClickDetector") then
                    local distance = (money.Position - Player.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= Settings.Max_Distance then
                        fireclickdetector(money.ClickDetector)
                    end
                end
            end
        end

        -- Main loop
        spawn(function()
            while getgenv().cashAuraEnabled do
                pcall(getMoneyAroundMe)
                wait(0.01)
            end
        end)
    end
})

local Toggle5 = Page4:Toggle({
    Name = "remove fog",
    Default = false,
    callback = function(value)
        local function removeFog()
            local lighting = game:GetService("Lighting")
            lighting.FogEnd = 1e10
            lighting.FogStart = 1e10
            lighting.FogColor = Color3.new(1, 1, 1) -- Optional: Set to desired color
        end
        
        removeFog()
        
        game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(removeFog)
        game:GetService("Lighting"):GetPropertyChangedSignal("FogStart"):Connect(removeFog)
        game:GetService("Lighting"):GetPropertyChangedSignal("FogColor"):Connect(removeFog)
        
        game:GetService("Lighting").Changed:Connect(removeFog)
})

local Toggle6 = Page4:Toggle({
    Name = "resolver",
    Default = false,
    callback = function(value)
        local RunService = game:GetService("RunService")

        RunService.Heartbeat:Connect(function()
           pcall(function()
               for i,v in pairs(game.Players:GetChildren()) do
                   if v.Name ~= game.Players.LocalPlayer.Name then
                       local hrp = v.Character.HumanoidRootPart
                       hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)    
                       hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)  
                   end
               end
           end)
        end)   
})

local Toggle7 = Page4:Toggle({
    Name = "antiaim viewer",
    Default = false,
    callback = function(value)
        local China = setmetatable({}, {
            index = function(Company, Price)
                return game:GetService(Price)
            end})
         
         local Players = China.Players
         local ReplicatedStorage = China.ReplicatedStorage
         
         --//Variables
         local LocalPlayer = Players.LocalPlayer
         local Mouse =  LocalPlayer:GetMouse()
         
         local MainEvent = ReplicatedStorage:FindFirstChild("MainEvent") or nil
         local Tool = nil
         
         Bypass = function(Entity)
            Entity.ChildAdded:Connect(function(Child)
                if Child:IsA("Tool") then
                  Tool = Child.Activated:Connect(function()
                        if MainEvent then
                           MainEvent:FireServer("UpdateMousePos", Mouse.Hit.Position)
                        end
                    end)
                end
            end)
         end
         
         
         
         local Alive = function(Player)
            return Player and Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") or false
         end
         
         LocalPlayer.CharacterAdded:Connect(function(Character)
            Bypass(Character)
         end)
         
         if Alive(LocalPlayer) then
            LocalPlayer.Character.Humanoid:UnequipTools()
            Bypass(LocalPlayer.Character)
         end
         
         local Hook
         Hook = hookmetamethod(game, "namecall", function(self, ...)
            local Args = {...}
            local Method = getnamecallmethod()
         
            if not checkcaller() and Method == "FireServer" and self.Name == "MainEvent" and Args[1] == "UpdateMousePos" then
         
               Args[2] = "Scarcin made this" and Mouse.Hit.Position
         
                return self.FireServer(self, unpack(Args))
            end
         
            return Hook(self, ...)
         end)
})



--[[
    PlayerList:GetSelection(),
    PlayerList:UpdateScroll(),
    PlayerList:Refresh("table"),
    PlayerList:Update()
]]

Window:Initialize() -- DO NOT REMOVE
